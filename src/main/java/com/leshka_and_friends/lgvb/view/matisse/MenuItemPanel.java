/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.leshka_and_friends.lgvb.view.matisse;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.beans.BeanProperty;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/**
 *
 * @author gpesana
 */
public class MenuItemPanel extends javax.swing.JPanel {

    /**
     * Creates new form MenuItemPanel
     */
    private boolean isSelected = false;
    private boolean isHovered = false;

    private boolean useClickColor = true;

    private static final double ICON_SCALE_FACTOR = 0.50;

    private javax.swing.Icon originalIcon;

// Colors
    private final java.awt.Color clickedColor = new java.awt.Color(202, 28, 82); // #CA1C52
    private final java.awt.Color hoverColor = new java.awt.Color(40, 40, 50); // softer pinkish hover

    public MenuItemPanel() {
        initComponents();
        setOpaque(false);
        handleClicks();

        if (!java.beans.Beans.isDesignTime()) {
            // At runtime â†’ clear placeholder icon set by Matisse
            menuItemLabel.setIcon(null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuItemLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(202, 28, 82));
        setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(1, 35, 1, 1)));
        setPreferredSize(new java.awt.Dimension(198, 32));
        setLayout(new java.awt.BorderLayout(10, 10));

        menuItemLabel.setFont(new java.awt.Font("Inter", 0, 14)); // NOI18N
        menuItemLabel.setForeground(new java.awt.Color(255, 255, 255));
        menuItemLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        menuItemLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Dashboard-14px.png"))); // NOI18N
        menuItemLabel.setText("Testing");
        menuItemLabel.setIconTextGap(20);
        add(menuItemLabel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    @BeanProperty(preferred = true, description = "Text shown in the panel's label")
    public String getItemText() {
        return menuItemLabel.getText();
    }

    public void setItemText(String text) {
        menuItemLabel.setText(text);
        repaint();
    }

    @BeanProperty(preferred = true, description = "Icon shown in the panel's label")
    public javax.swing.Icon getItemIcon() {
        return menuItemLabel.getIcon();
    }

    public void setItemIcon(ImageIcon icon) {
        if (icon == null) {
            System.err.println("[WARN] Tried to set null icon on MenuItemPanel");
            return;
        }

        int labelHeight = menuItemLabel.getHeight();

        if (labelHeight == 0) {
            // Defer scaling until layout is ready
            SwingUtilities.invokeLater(() -> setItemIcon(icon));
            return;
        }

        menuItemLabel.setIcon(scaleIcon(icon, labelHeight, ICON_SCALE_FACTOR));
        menuItemLabel.revalidate();
        menuItemLabel.repaint();
    }

    private ImageIcon scaleIcon(ImageIcon icon, int targetHeight, double scaleFactor) {
        if (icon == null || targetHeight <= 0 || scaleFactor <= 0) {
            return icon; // return unscaled if invalid
        }

        int renderHeight = (int) (targetHeight * scaleFactor);
        Image originalImage = icon.getImage();

        int newWidth = (int) ((double) originalImage.getWidth(null) / originalImage.getHeight(null) * renderHeight);
        Image scaledImage = originalImage.getScaledInstance(newWidth, renderHeight, Image.SCALE_SMOOTH);

        return new ImageIcon(scaledImage);
    }

    @BeanProperty(preferred = true, description = "Menu Icon and Text Gap")
    public int getMenuGap() {
        return menuItemLabel.getIconTextGap();
    }

    public void setMenuGap(int gap) {
        menuItemLabel.setIconTextGap(gap);
        repaint();
    }

    @BeanProperty(preferred = true, description = "Render Click Color")
    public boolean isUseClickColor() {
        return this.useClickColor;
    }

    public void setUseClickColor(boolean useClickColor) {
        this.useClickColor = useClickColor;
        repaint();
    }

    public void handleClicks() {
        addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent e) {
                if (!isSelected) {
                    isHovered = true;
                    repaint();
                }
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent e) {
                if (!isSelected) {
                    isHovered = false;
                    repaint();
                }
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent e) {
                if (useClickColor) {
                    isSelected = true;
                    isHovered = false;
                } else {
                    // If no click color, just treat it like hover
                    isSelected = false;
                    isHovered = true;
                }
                repaint();
            }
        });

    }

    public void setSelected(boolean selected) {
        this.isSelected = selected;
        this.isHovered = false; // reset hover if selected
        repaint();
    }

    public boolean isSelected() {
        return isSelected;
    }

    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        int radius = 20;
        java.awt.Color fillColor = null;

        if (isSelected && useClickColor) {
            fillColor = clickedColor;
        } else if (isHovered) {
            fillColor = hoverColor;
        } else {
            fillColor = new java.awt.Color(0, 0, 0, 0); // transparent
        }

        g2.setColor(fillColor);
        g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);
        g2.dispose();

        super.paintComponent(g);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel menuItemLabel;
    // End of variables declaration//GEN-END:variables
}
